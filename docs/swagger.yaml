basePath: /api/v1
definitions:
  api.AuthPureID:
    properties:
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      headers:
        additionalProperties:
          type: string
        example:
          Content-Type: application/json
        type: object
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        example: jira-deepcore
        type: string
    type: object
  api.ControlPureContentID:
    properties:
      content:
        example: aGVsbG8ge3submFtZX19Cg==
        format: base64
        type: string
      endpoints:
        additionalProperties:
          type: string
        type: object
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        type: string
    type: object
  api.ControlPureID:
    properties:
      endpoints:
        additionalProperties:
          type: string
        type: object
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        type: string
    type: object
  api.ItemName:
    properties:
      item:
        example: template1
        type: string
      name:
        example: deepcore/template1
        type: string
    type: object
  api.LoginModel:
    properties:
      login:
        example: admin
        type: string
      password:
        example: admin
        type: string
    type: object
  api.LoginToken:
    properties:
      token:
        example: tokenJWT
        type: string
    type: object
  api.TemplatePureID:
    properties:
      content:
        example: aGVsbG8ge3submFtZX19Cg==
        format: base64
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        example: deepcore/template1
        type: string
    type: object
  api.TokenDataByID:
    properties:
      createdby:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      date:
        example: "2021-02-18T21:54:42.123Z"
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        example: mytoken
        type: string
    type: object
  api.UserDataID:
    properties:
      email:
        example: userx@worldline.com
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        example: userX
        type: string
    type: object
  api.UserPureID:
    properties:
      email:
        example: userx@worldline.com
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        example: userX
        type: string
      password:
        example: pass1234
        type: string
    type: object
  api.information:
    properties:
      buildCommit:
        type: string
      buildDate:
        type: string
      environment:
        type: string
      name:
        type: string
      serverDate:
        type: string
      startDate:
        type: string
      version:
        type: string
    type: object
  apimodels.Data:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
    type: object
  apimodels.DataMeta:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
      meta: {}
    type: object
  apimodels.Error:
    properties:
      error:
        example: some problem
        type: string
    type: object
  apimodels.ID:
    properties:
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
    type: object
  apimodels.Meta:
    properties:
      count:
        example: 35
        type: integer
      limit:
        example: 20
        type: integer
      offset:
        example: 0
        type: integer
      search:
        type: string
    type: object
  models.AuthPure:
    properties:
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      headers:
        additionalProperties:
          type: string
        example:
          Content-Type: application/json
        type: object
      name:
        example: jira-deepcore
        type: string
    type: object
  models.ControlPureContent:
    properties:
      content:
        example: aGVsbG8ge3submFtZX19Cg==
        format: base64
        type: string
      endpoints:
        additionalProperties:
          type: string
        type: object
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  models.Email:
    properties:
      email:
        type: string
      host:
        type: string
      no_auth:
        type: boolean
      password:
        type: string
      port:
        type: integer
    type: object
  models.Token:
    properties:
      created_at:
        type: string
      createdby:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      date:
        example: "2021-02-18T21:54:42.123Z"
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      id:
        example: cf8a07d4-077e-402e-a46b-ac0ed50989ec
        type: string
      name:
        example: mytoken
        type: string
      token:
        example: tokenJWT
        type: string
    type: object
  models.TokenData:
    properties:
      date:
        example: "2021-02-18T21:54:42.123Z"
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      name:
        example: mytoken
        type: string
    type: object
  models.TokenPrivate:
    properties:
      token:
        example: tokenJWT
        type: string
    type: object
  models.UserPure:
    properties:
      email:
        example: userx@worldline.com
        type: string
      groups:
        example:
        - admin
        - group1
        items:
          type: string
        type: array
      name:
        example: userX
        type: string
      password:
        example: pass1234
        type: string
    type: object
  run.runModel:
    properties:
      inputs:
        items:
          type: integer
        type: array
      script:
        items:
          type: integer
        type: array
      settings:
        $ref: '#/definitions/run.settings'
    type: object
  run.settings:
    properties:
      async:
        type: boolean
      timeout:
        type: string
    type: object
info:
  contact: {}
  description: |-
    Storage and Send API
    First login with user and use authorization as "Bearer JWTTOKEN"
paths:
  /auth:
    delete:
      description: Delete with id or name
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      - description: get by name
        in: query
        name: name
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete auth
      tags:
      - auth
    get:
      description: Get one auth with id or name
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      - description: get by name
        in: query
        name: name
        type: string
      - description: get for record values
        in: query
        name: dump
        type: boolean
      - description: pretty output for dump
        in: query
        name: pretty
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.AuthPureID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Get auth
      tags:
      - auth
    patch:
      description: Patch with a few data, id must exist in request
      parameters:
      - description: send part of the user object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/api.AuthPureID'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Patch auth
      tags:
      - auth
    post:
      description: Send and record new auth
      parameters:
      - description: send auth object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.AuthPure'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New auth
      tags:
      - auth
    put:
      description: Send and record auth
      parameters:
      - description: send auth object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.AuthPure'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New or Update auth
      tags:
      - auth
  /auths:
    get:
      description: Get list of the auths
      parameters:
      - description: set the limit, default is 20
        in: query
        name: limit
        type: integer
      - description: set the offset, default is 0
        in: query
        name: offset
        type: integer
      - description: search item
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.DataMeta'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.AuthPureID'
                  type: array
                meta:
                  $ref: '#/definitions/apimodels.Meta'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: List auths
      tags:
      - auth
  /control:
    delete:
      description: Delete with id or name
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      - description: get by name
        in: query
        name: name
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete control
      tags:
      - control
    get:
      description: Get one control with id, content is base64 format
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      - description: get by name
        in: query
        name: name
        type: string
      - description: not get content
        in: query
        name: nodata
        type: boolean
      - description: get for record values
        in: query
        name: dump
        type: boolean
      - description: pretty output for dump
        in: query
        name: pretty
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.ControlPureContentID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Get control
      tags:
      - control
    patch:
      description: Replace with new data, id or name must exist in request
      parameters:
      - description: send part of the control object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/api.ControlPureID'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Replace control
      tags:
      - control
    post:
      description: Send and record new control, content must be base64 format
      parameters:
      - description: send control object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.ControlPureContent'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New control
      tags:
      - control
    put:
      description: Send and record control, content must be base64 format
      parameters:
      - description: send control object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.ControlPureContent'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New or Update control
      tags:
      - control
  /controls:
    get:
      description: Get list of the controls
      parameters:
      - description: set the limit, default is 20
        in: query
        name: limit
        type: integer
      - description: set the offset, default is 0
        in: query
        name: offset
        type: integer
      - description: search item
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.DataMeta'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ControlPureID'
                  type: array
                meta:
                  $ref: '#/definitions/apimodels.Meta'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: List controls
      tags:
      - control
  /info:
    get:
      description: Get information of the server
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.information'
      summary: Information
      tags:
      - public
  /login:
    get:
      description: Get JWT token for 1 hour
      parameters:
      - description: raw token output
        in: query
        name: raw
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.LoginToken'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - BasicAuth: []
      summary: Login with basic auth
      tags:
      - public
    post:
      description: Get JWT token for 1 hour
      parameters:
      - description: send login object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/api.LoginModel'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.LoginToken'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      summary: Login
      tags:
      - public
  /ping:
    get:
      description: Check server is active
      responses:
        "200":
          description: OK
      summary: Ping server
      tags:
      - public
  /run/js:
    post:
      consumes:
      - text/plain
      description: Run JS script with scripts and input values
      parameters:
      - description: Script and inputs
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/run.runModel'
      responses:
        "200":
          description: result of the script
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Run JS script
      tags:
      - run
  /run/template:
    post:
      consumes:
      - text/plain
      description: Render template with input values
      parameters:
      - description: send key values
        in: body
        name: payload
        schema:
          example: ""
          type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Render template
      tags:
      - run
  /send:
    get:
      consumes:
      - text/plain
      description: Send request with bind id or name
      parameters:
      - description: set endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: set control
        in: query
        name: control
        required: true
        type: string
      - description: send key values
        in: body
        name: payload
        schema:
          example: ""
          type: string
      responses:
        "200":
          description: respond from related server
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Send run the control; methods depending in control
      tags:
      - run
    post:
      consumes:
      - text/plain
      description: Send request with bind id or name
      parameters:
      - description: set endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: set control
        in: query
        name: control
        required: true
        type: string
      - description: send key values
        in: body
        name: payload
        schema:
          example: ""
          type: string
      responses:
        "200":
          description: respond from related server
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Send run the control; methods depending in control
      tags:
      - run
  /settings:
    get:
      description: Get whole settings
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.UserDataID'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Settings
      tags:
      - settings
    patch:
      description: Replace with new data
      parameters:
      - description: send part of the settings object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.Email'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Replace settings
      tags:
      - settings
  /template:
    delete:
      description: Delete with id, name
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      - description: get by name
        in: query
        name: name
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete template
      tags:
      - template
    get:
      description: Get one template with id
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      - description: get by name
        in: query
        name: name
        type: string
      - description: get raw content
        in: query
        name: dump
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.TemplatePureID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Get template
      tags:
      - template
    patch:
      consumes:
      - text/plain
      description: Replace with new data, id or name must exist in request
      parameters:
      - description: get by name
        in: query
        name: name
        type: string
      - description: send template object
        in: body
        name: payload
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Replace template
      tags:
      - template
    post:
      consumes:
      - text/plain
      description: Send and record new template
      parameters:
      - description: name of file 'deepcore/template1'
        in: query
        name: name
        required: true
        type: string
      - description: group names 'group1,group2'
        in: query
        name: groups
        type: string
      - description: send template object
        in: body
        name: payload
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New template
      tags:
      - template
    put:
      consumes:
      - text/plain
      description: Send and record template
      parameters:
      - description: name of file 'deepcore/template1'
        in: query
        name: name
        required: true
        type: string
      - description: group names 'group1,group2'
        in: query
        name: groups
        type: string
      - description: send template object
        in: body
        name: payload
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New or Update template
      tags:
      - template
  /templates:
    get:
      description: Get list of the templates, specify key query to get inner paths
      parameters:
      - description: set the limit, default is empty
        in: query
        name: folder
        type: string
      - description: set the limit, default is 20
        in: query
        name: limit
        type: integer
      - description: set the offset, default is 0
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.DataMeta'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.ItemName'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: List templates
      tags:
      - template
  /token:
    delete:
      description: Delete with token
      parameters:
      - description: get by token id
        in: query
        name: id
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete token
      tags:
      - token
    get:
      description: Get token with token id
      parameters:
      - description: get by token id
        in: query
        name: id
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/models.Token'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Get token
      tags:
      - token
    post:
      description: Send and record PAT token
      parameters:
      - description: token parameters
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.TokenData'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/models.Token'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New token
      tags:
      - token
  /token/check:
    post:
      description: Send token to check validation, if not valid return 401
      parameters:
      - description: send a token
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.TokenPrivate'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenPrivate'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      summary: Check token
      tags:
      - token
  /token/renew:
    get:
      description: Get new token based on old token
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenPrivate'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      summary: Renew token
      tags:
      - token
  /tokens:
    get:
      description: Get list of the tokens
      parameters:
      - description: set the limit, default is 20
        in: query
        name: limit
        type: integer
      - description: set the offset, default is 0
        in: query
        name: offset
        type: integer
      - description: search item
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.DataMeta'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.TokenDataByID'
                  type: array
                meta:
                  $ref: '#/definitions/apimodels.Meta'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: List tokens
      tags:
      - token
  /user:
    delete:
      description: Delete with id or name
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - user
    get:
      description: Get one user with id or name
      parameters:
      - description: get by id
        in: query
        name: id
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/api.UserDataID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - user
    patch:
      description: Replace with new data, id or name must exist in request
      parameters:
      - description: send part of the user object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/api.UserPureID'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: Replace user
      tags:
      - user
    post:
      description: Send and record new user
      parameters:
      - description: send user object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.UserPure'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.Data'
            - properties:
                data:
                  $ref: '#/definitions/apimodels.ID'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: New user
      tags:
      - user
  /users:
    get:
      description: Get list of the users
      parameters:
      - description: set the limit, default is 20
        in: query
        name: limit
        type: integer
      - description: set the offset, default is 0
        in: query
        name: offset
        type: integer
      - description: search item
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/apimodels.DataMeta'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.UserDataID'
                  type: array
                meta:
                  $ref: '#/definitions/apimodels.Meta'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apimodels.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apimodels.Error'
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
